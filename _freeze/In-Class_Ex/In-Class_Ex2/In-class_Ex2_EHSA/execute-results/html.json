{
  "hash": "cb825d28073fc95424fcffbdf38eb9d6",
  "result": {
    "markdown": "---\ntitle: \"In-Class_Ex2_EHSA\"\ndate: '25 November 2023'\ndate-modified: 'last-modified'\nformat: html\nexecute: \n  eval: true # run the code live\n  echo: true # all code will appear\n  warning: false # hide all warnings\neditor: visual\n---\n\n\n## Getting Started\n\n### Installing and Loading R Packages\n\nLoading R packages. The *plotly* library is added to create interactive maps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, plotly, tidyverse, knitr)\n```\n:::\n\n\n## The Data\n\n### Importing geospatial data\n\n*st_read()* can be used to read the shape file data set into an R sf data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = 'data/geospatial',\n                 layer = 'Hunan')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Hunan' from data source \n  `D:\\phlong2023\\ISSS624\\In-Class_Ex\\In-Class_Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n### Importing time series file\n\n*read_csv()* can be used to read the time series file into an R data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC <- read_csv('data/aspatial/Hunan_GDPPC.csv')\n```\n:::\n\n\n## Creating a Time Series\n\n*spacetime()* can be used to create a Space Time Cube\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC_st <- spacetime(GDPPC, hunan,\n                      .loc_col = 'County',\n                      .time_col = 'Year')\n```\n:::\n\n\n*is_spacetime_cube()* can be used to check whether the created object is actually a spacetime cube\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(GDPPC_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### Creating Inverse Distance Weight Matrix Columns for GI\\*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGDPPC_nb <- GDPPC_st %>%\n  activate('geometry') %>%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1)%>%\n  set_nbs('nb') %>%\n  set_wts('wt')\n```\n:::\n\n\n### Computing GI\\*\n\nComputing GI\\* using the newly created data frame with the neighbor list and weight matrix for each county for each year\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngi_stars <- GDPPC_nb %>%\n  group_by(Year) %>%\n  mutate(gi_star = local_gstar_perm(GDPPC, nb, wt)) %>%\n  unnest(gi_star)\n```\n:::\n\n\n## Man-Kendall Test\n\n### Performing Emerging Hotspot Analysis\n\n*emerging_hotspot_analysis()* can be used to perform the Emerging Hotspot Analysis using the space time cube object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- emerging_hotspot_analysis(\n  x = GDPPC_st,\n  .var = 'GDPPC',\n  k = 1, #Comparing the Time Series sequentially (e.g. 2012 vs 2013)\n  nsim = 99\n)\n```\n:::\n\n\nPlotting the distribution of hotspot type\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ehsa, aes(x=classification))+\n  geom_bar()+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_EHSA_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Visualizing EHSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_rename <- ehsa %>%\n  rename(County = location)\n\nhunan_ehsa <- left_join(hunan, ehsa_rename,\n                        by = 'County')\n\nehsa_sig <- hunan_ehsa %>%\n  filter(p_value < 0.05)\ntmap_mode('plot')\ntm_shape(hunan_ehsa) +\n  tm_polygons()+\n  tm_borders(alpha = 0.5)+\n  tm_shape(ehsa_sig)+\n  tm_fill('classification')+\n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_EHSA_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex2_EHSA_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}