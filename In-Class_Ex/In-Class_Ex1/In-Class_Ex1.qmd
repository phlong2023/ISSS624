---
title: "In-Class Exercise 1"
date: '18 November 2023'
date-modified: 'last-modified'
format: html
execute: 
  eval: true # run the code live
  echo: true # all code will appear
  warning: false # hide all warnings
editor: visual
---

## The Task

To prepare a choropleth map showing the distribution of passenger trips at planning sub-zone by integrating *Passenger Volume by Origin Destination Bus Stops* and bus stop data sets downloaded from LTA DataMall and Planning Sub-zone boundary of URA Master Plan 2019 from data.gov.sg.

## Getting Started

Loading the necessary packages in R:

1.  tmap: for thematic mapping
2.  sf: for geospatial data handling
3.  tidyverse: for non-spatial data handling

```{r}
pacman::p_load(tmap, tidyverse, sf, knitr)
```

## Importing the OD Data

Firstly we will import the *Passenger Volume by Origin Destination Bus Stops* data downloaed from LTA DataMall by using read_csv() of **readr** package

```{r}
# eval:false
odbus <- read_csv('data/aspatial/origin_destination_bus_202308.csv')
```

We can check the odbus tibble dataframe to explore the data types

```{r}
glimpse(odbus)
```

We can convert ORIGIN_PT_CODE and DESTINATION_PT_CODE into Factor data, a data type unique to R, in order to speed up sorting

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

We can confirm that the data types of ORIGIN_PT_CODE and DESTINATION_PT_CODE using glimpse()

```{r}
glimpse(odbus)
```

## Extracting the study data

If we want to pick out the commuter data between 7 and 9 o clock on weekdays

```{r}
origin_7_9 <- odbus %>%   filter(DAY_TYPE == 'WEEKDAY') %>%   filter(TIME_PER_HOUR >=7 & TIME_PER_HOUR <=9) %>%   group_by(ORIGIN_PT_CODE)%>%   summarise(TRIPS = sum(TOTAL_TRIPS))
```

We can check the data table using the code below

```{r}
kable(head(origin_7_9))
```

We will save the output in rds format for future use

```{r}
write_rds(origin_7_9, 'data/rds/origin_7_9.rds')
```

We can read the origin7_9.rds into R using the code below

```{r}
origin_7_9 <- read_rds('data/rds/origin_7_9.rds')
```

## Working with Geospatial Data

Two geospatial data will be used in this study:

1.  BusStop: Location of bus stops in the last quarter of 2022
2.  MPSZ-2019: Master Plan Boundary (No Sea) of Singapore in 2019

### Importing geospatial data

We can import the BusStop shape file into an R simple feature dataframe using st_read()

```{r}
busstop <- st_read(dsn = 'data/geospatial',
                   layer = 'BusStop')
```

We can check the structure and data types of the new busstop dataframe using glimpse()

```{r}
glimpse(busstop)
```

As the busstop data frame has a CRS of SVY21, we want to transform it into a CRS of SVY21 / Singapore TM (EPSG 3414) using st_transform()

```{r}
busstop <- st_transform(busstop, crs = 3414)
```

We can next import the Master Plan Sub-zone Boundary 2019 shape file into a simple feature dataframe using st_read()

```{r}
mpsz <- st_read(dsn = 'data/geospatial',
                layer = 'MPSZ-2019')
```

We can see that the CRS for the mpsz dataframe is WGS 84 (or EPSG 4326), we want it to be SVY21 (or EPSG 3414). We can do this by using st_transform()

```{r}
mpsz <- st_transform(mpsz, 3414)
```

We can double check the CRS of mpsz using st_geometry(). We can see that the Projected CRS is now SVY21

```{r}
st_geometry(mpsz)
```

## Geospatial Data Wrangling

### Combining busstop and mpsz

This code below populates the planning subzone code (SUBZONE_C) of mpsz data frame into the busstop data frame. st_intersection() is used to perform point and polygon overlap and the output will be in point simple feature object.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

We will save the new data frame into rds format

```{r}
write_rds(busstop_mpsz, 'data/rds/busstop_mpsz.csv')
```

Next, we are going to append the planning subzone code from busstop_mpsz data frame onto origin_7_9 data frame

```{r}
origin_data <- left_join(origin_7_9, busstop_mpsz,
                         by = c('ORIGIN_PT_CODE' = 'BUS_STOP_N')) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C)
```

It is good practice to check for duplicate records

```{r}
duplicate <- origin_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

If duplicated records are found, the code chunk below will be used to retain only the unique records

```{r}
origin_data <- unique(origin_data)
```

We can re-reun the code chunk to check for duplicate records in the new data frame. We will now see that the duplicate dataframe contains 0 observation.

```{r}
duplicate <- origin_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

Now, we can append the bus stop code and number of trips starting from that code onto the original mpsz data frame (which contains the geometry information for mapping)

```{r}
mpsz_origtrip <- left_join(mpsz, origin_data,
                         by = c('SUBZONE_C' = 'ORIGIN_SZ'))
```

## Choropleth Visualization

To create a choropleth visualization, we can using the tmap package

```{r}
tm_shape(mpsz_origtrip)+
  tm_fill('TRIPS',
          n = 6,
          style = 'quantile',
          palette = 'Blues')+
  tm_layout(main.title = 'Passenger Trips Generated at Planning Sub-zone Level',
            main.title.position = 'center',
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE)+
  tm_borders(alpha = 0.5)+
  tm_compass(type = '8star', size = 2)+
  tm_scale_bar()+
  tm_grid(alpha = 0.2)+
  tm_credits('Source: Planning Sub-zone Boundary from Urban Redevelopment Authority (URA) \n and Population Data from Department of Statistics (DOS)',
             position = c('left','bottom'))
```

We can use a map using custom breaks for comparison. Before that, we can use the summary function to determine appropriate breakpoints

```{r}
summary(mpsz_origtrip$TRIPS)
```

Then, we can draw the map using the tmap package

```{r}
tm_shape(mpsz_origtrip)+
  tm_fill('TRIPS',
          breaks = c(0, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000),
          palette = 'Blues')+
  tm_layout(main.title = 'Passenger Trips Generated at Planning Sub-zone Level',
            main.title.position = 'center',
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE)+
  tm_borders(alpha = 0.5)+
  tm_compass(type = '8star', size = 2)+
  tm_scale_bar()+
  tm_grid(alpha = 0.2)+
  tm_credits('Source: Planning Sub-zone Boundary from Urban Redevelopment Authority (URA) \n and Population Data from Department of Statistics (DOS)',
             position = c('left','bottom'))
```

It can be seen that due to the large variations in number of trips between different planning sub-zones, the custom breaks are not as insightful as the 'quantile' style built into tmap.
