---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
---

## Overview

In this hands-on exercise, I learn how to import and wrangle geospatial data using appropriate R packages.

## Getting Started

The code chunk below installs and loads [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)
```

## Importing Geospatial Data

### Importing polygon features data

Reading the Master Planning 2014 Subzone shapefile into a dataframe

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

Reading the CyclingPath shapefile into a dataframe

```{r}
cyclingpath <- st_read(dsn = "data/geospatial",layer = 'CyclingPathGazette')
```

Read the Pre-School Locations kml file into a dataframe using a complete path

```{r}
preschool <- st_read('data/geospatial/PreSchoolsLocation.kml')
```

## Checking the Content of a Simple Feature DataFrame

### Working with st_geometry()

Using st_geometry() to retrieve basic information of the dataframe

```{r}
st_geometry(mpsz)
```

### Working with glimpse()

Use glimpse() to get the data types of each column and some of their values

```{r}
glimpse(mpsz)
```

### Working with head()

head() lets us inspect the top n rows of the dataframe

```{r}
head(mpsz, n= 5)
```

## Plotting Geospatial Data

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum. This can be seen using the plot() function.

```{r}
plot(mpsz)
```

We can choose to plot only the geometry (outline) by using st_geometry()

```{r}
plot(st_geometry(mpsz))
```

We can also choose the specific attribute of the dataframe we would like to plot by addressing it in the R dataframe

```{r}
plot(mpsz['PLN_AREA_N'])
```

## Working with Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.

The process of projecting one dataframe from one coordinate system to another is called **projection transformation**.

### Assigning EPSG code to a simple feature data frame

Identifying the coordinate system of a dataframe using st_crs()

```{r}
st_crs(mpsz)
```

In order to assign the correct EPSG code, use st_set_crs()

```{r}
mpsz3414 <- st_set_crs(mpsz,3414)
```

Double check the new ESPG using st_crs()

```{r}
st_crs(mpsz3414)
```

### Transforming the projection of preschool from WGS84 to SVY21

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

Check the coordinate system for the preschool dataframe

```{r}
st_geometry(preschool)
```

st_set_crs() is not appropriate here because we need to reproject the dataframe from one coordinate system to another coordinate system mathematically.

This can be performed using st_transform()

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

Double-check the coordinate system for preschool3414

```{r}
st_geometry(preschool3414)
```

## Importing and Converting Aspatial Data

### Importing the Aspatial Data

We can read the listings csv into an R tibble dataframe using read_csv() of readr

```{r}
listings <- read_csv('data/aspatial/listings.csv')
```

We can use list(), instead of glimpse() in order to see the columns, data types, and some rows of the new dataframe

```{r}
list(listings)
```

### Creating a simple feature dataframe from an aspatial dataframe

st_as_sf() can be used to convert the listing dataframe into a simple feature dataframe. Note that:

1.  coords argument requires the column name of the x-coordinates first (longitude) then the column name of the y-coordinates (latitude)
2.  crs argument requires the specific coordinates system. As we suspect the coordinate system of listings to be WGS84, this would be crs = 4326 . Singapore's EPSG code is 3414 as we have used before.
3.  We use %\>% in dplyr to nest st_transform() to reproject the new simple feature dataframe into SVY21 (EPSG: 3414) coordinates system.

```{r}
listings_sf <- st_as_sf(listings,
                        coords = c('longitude','latitude'),
                        crs=4326)%>%
  st_transform(crs=3414)
```

glimpse() can be used to view the new simple feature dataframe, its data types, and some row values. Notice that a new column called geometry has been added and longitude and latitude have been dropped.

```{r}
glimpse(listings_sf)
```

## Geoprocessing with sf package

The sf package offers a wide range of geoprocessing (GIS) functions.

In this section, you will learn how to perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### Buffering

**The scenario:**

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. **You are tasked to determine the extend of the land need to be acquired and their total area**.

**The solution**

We can use st_buffer() to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist =5,
                            nQuadSegs = 30)
```

We can then calculate the area of each of the buffers using st_area()

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, we can sum up all the areas of the buffers to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

### Point-in-polygon count

**The** **scenario**:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

**The solution:**

We can: first, identify pre-schools located inside each Planning Subzone by using st_intersects(), second, length() can be used to calculate number of pre-schools that falls inside each planning subzone.

```{r}
mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
```

summary() can be used to check the summary statistics of the newly created PreSch Count column in mpsz3414

```{r}
summary(mpsz3414$`PreSch Count`)
```

top_n() can be used to list the top n planning subzone with the highest number of pre-school

```{r}
top_n(mpsz3414,1,`PreSch Count`)
```

We can also calculate the density of preschool by planning subzone:

First, st_area() can be used to derive the area of each planning subzone.

```{r}
mpsz3414$AREA <- mpsz3414%>%
  st_area()
```

Next, mutate() can be used to compute the density by using the previously created 'PreSch Count' and 'AREA' columns

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = (`PreSch Count`/AREA)*1000000)
```

We can extract the planning subzone with the highest preschool density using top_n()

```{r}
top_n(mpsz3414,1,`PreSch Density`)
```
