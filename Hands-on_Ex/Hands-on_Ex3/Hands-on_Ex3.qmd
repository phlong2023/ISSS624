---
title: "Hands-on_Ex3"
date: '30 November 2023'
date-modified: 'last-modified'
format: html
execute: 
  eval: true # run the code live
  echo: true # all code will appear
  warning: false # hide all warnings
editor: visual
---

# Processing and Visualizing Flow Data

## Overview

Spatial interaction represents the flow of people, material, or information between locations in geographical space. It encompasses everything from freight shipments, energy flows, and the global trade in rare antiquities, to flight schedules, rush hour woes, and pedestrian foot traffic.

Each spatial interaction, as an analogy for a set of movements, is composed of a discrete origin/destination pair. Each pair can be represented as a cell in a matrix where rows are related to the locations (centroids) of origin, while columns are related to locations (centroids) of destination. Such a matrix is commonly known as an **origin/destination matrix,** or **spatial interaction matrix.**

We will by an OD Matrix by using *Passenger Volume by Origin Destination Bus Stops* data set downloaded in the previous exercises.

## Getting Started

The following package will be loaded in with the *p_load()* function of **pacman: sf, tidyverse, tmap, DT, stplanr.**

```{r}
pacman::p_load(sf, tidyverse, tmap, DT, stplanr)
```

## Preparing the Flow Data

### Importing the OD Data

We will import the *Passenger Volume by Origin Destination Bus Stops* using *read_csv().*

```{r}
odbus <- read_csv('data/aspatial/origin_destination_bus_202310.csv')
```

*glimpse()* can be used to display the data type and some rows of the odbus data frame.

```{r}
glimpse(odbus)
```

ORIGIN_PT_CODE and DESTINATION_PT_CODE are in character data type whereas they should be converted into factor data type for easier manipulation.

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)

odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

### Extracting the study data

We will only look at commuting flows on weekday between 6 and 9 o'clock. This can be extracted using the *filter()* function.

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == 'WEEKDAY') %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

*datatable()* can be used to view odbus6_9

```{r}
datatable(odbus6_9)
```

We will save the output in rds format for future use.

```{r}
write_rds(odbus6_9, 'data/rds/odbus6_9.rds')
```

*read_rds()* can be used to import the rds file into R.

```{r}
odbus6_9 <- read_rds('data/rds/odbus6_9.rds')
```

## Working with Geospatial Data

Two geospatial data sets will be used:

-   BusStop: This data provides the location of bus stops as at July 2023

-   MPSZ-2019: this data provides the sub-zone boundary of URA Master Plan 2019.

Both data sets are in ESRI shapefile format.

### Importing Geospatial Data

```{r}
busstop <- st_read(dsn = 'data/geospatial',
                   layer = 'BusStop') %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = 'data/geospatial',
                layer = 'MPSZ-2019') %>%
  st_transform(crs = 3414)
```

```{r}
mpsz
```

## Geospatial Data Wrangling

### Combining BusStop and mpsz

We can populate the planning subzone code (SUBZONE_C) of mpsz sf data frame into busstop sf data frame

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

```{r}
datatable(busstop_mpsz)
```

Before moving to the next step, it is wise to save the output into rds format.

```{r}
write_rds(busstop_mpsz, 'data/rds/busstop_mpsz.rds')
```

We are going to append the planning subzone code from busstop_mpsz data frame onto odbus6_9 data frame.

```{r}
od_data <- left_join(odbus6_9, busstop_mpsz, by = c('ORIGIN_PT_CODE' = 'BUS_STOP_N')) %>%
  rename(ORGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

Before continuing, it is a good practice for us to check for duplicating records

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup
```

If duplicated records are found, we can remove them using *unique().*

```{r}
od_data <- unique(od_data)
```

We can reconfirm whether the duplicated records have been removed.

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

We can confirm that there is no more duplicate records.

Now, we can update od_data with the planning subzone codes for destination subzone.

```{r}
od_data <- left_join(od_data, busstop_mpsz, by = c('DESTIN_BS'= 'BUS_STOP_N'))
```

Next, we can check for duplicate record and proceed to remove them

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

od_data <- unique(od_data)
```

Next, we can rename the new subzone column and summarise the total number of trips by each origin and destination subzones.

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

Now, we can save the output into an rds file format.

```{r}
write_rds(od_data, 'data/rds/od_data.rds')
```

```{r}
od_data <- read_rds('data/rds/od_data.rds')
```

## Visualizing Spatial Interaction

We can prepare a desire line by using the **stplanr** package.

### Removing Intra-zonal Flows

We will not plot the intra-zonal flows.

```{r}
od_data1 <- od_data[od_data$ORIGIN_SZ != od_data$DESTIN_SZ,]
```

### Creating Desire Lines

*od2line()* is used to create the desire lines.

```{r}
flowLine <- od2line(flow = od_data1, 
                    zones = mpsz,
                    zone_code = 'SUBZONE_C')
```

### Visualizing the Desire Lines

We can use the **tmap** package to visualize the desire line.

```{r}
tmap_mode('plot')
tm_shape(mpsz)+
  tm_polygons() +
  flowLine %>%
  tm_shape()+
  tm_lines(lwd = 'MORNING_PEAK',
           style = 'quantile',
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

When the flow data are very messy, and highly skewed like the one shown above, it is wiser to focus on selected flows. For example, flow greater than or equal to 5000 as shown below.

```{r}
tm_shape(mpsz)+
  tm_polygons()+
  flowLine %>%
  filter(MORNING_PEAK >= 5000) %>%
  tm_shape()+
  tm_lines(lwd = 'MORNING_PEAK',
           style = 'quantile',
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```
